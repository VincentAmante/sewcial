generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id      String @id @default(uuid())
  details String
}

model Author {
  firstName     String
  lastName      String
  templates     Template[]
  CatalogueItem CatalogueItem[]

  @@id([firstName, lastName], name: "authorName")
}

model Template {
  id                 String               @id @default(uuid())
  name               String
  description        String               @db.VarChar(400)
  details            Json?
  priceAED           Float
  isFeatured         Boolean
  categoryTagId      String?
  authorFirstName    String?
  authorLastName     String?
  skill              Skill
  assembly           Json?
  createdAt          DateTime             @default(now())
  equipment          Json?
  materialsRequired  Json?
  templateImage      String               @default("")
  thumbnail          String               @default("")
  MaterialOnTemplate MaterialOnTemplate[]
  CategoryTag        TemplateCategoryTag? @relation(fields: [categoryTagId], references: [id])
  Author             Author?              @relation(fields: [authorFirstName, authorLastName], references: [firstName, lastName])

  @@index([authorFirstName, authorLastName])
  @@index([categoryTagId])
}

model TemplateCategoryTag {
  id       String     @id @default(uuid())
  name     String
  Template Template[]
}

model CatalogueItem {
  id                 String                     @id @default(uuid())
  name               String
  description        String
  imageSrc           String
  priceAED           Float
  isFeatured         Boolean                    @default(false)
  sizingsData        Json?
  categoryTagName    String?
  createdAt          DateTime                   @default(now())
  authorFirstName    String?                    @default("first name missing")
  authorLastName     String?                    @default("last name missing")
  CategoryTag        CatalogueCategoryTag?      @relation(fields: [categoryTagName], references: [name])
  materials          MaterialOnCatalogueItems[]
  LikedCatalogueItem LikedCatalogueItem[]
  Author             Author?                    @relation(fields: [authorFirstName, authorLastName], references: [firstName, lastName])

  @@index([authorFirstName, authorLastName])
  @@index([categoryTagName])
}

model MaterialOnCatalogueItems {
  id            String        @id @default(uuid())
  catalogueId   String
  materialName  EnumMaterial
  catalogueItem CatalogueItem @relation(fields: [catalogueId], references: [id])
  material      Material      @relation(fields: [materialName], references: [name])

  @@index([catalogueId])
  @@index([materialName])
}

model Material {
  name                     EnumMaterial               @id
  MaterialOnCatalogueItems MaterialOnCatalogueItems[]
  MaterialOnTemplate       MaterialOnTemplate[]
}

model MaterialOnTemplate {
  id           String       @id @default(uuid())
  templateId   String
  materialName EnumMaterial
  template     Template     @relation(fields: [templateId], references: [id])
  material     Material     @relation(fields: [materialName], references: [name])

  @@index([templateId])
  @@index([materialName])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CatalogueCategoryTag {
  name           String          @id
  sizingFormat   Json?
  CatalogueItems CatalogueItem[]
}

model Event {
  id        String     @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  title     String
  details   Json?
  thumbnail String     @default("")
  Bookings  Bookings[]
}

model Workshop {
  id          String     @id @default(uuid())
  startTime   DateTime
  endTime     DateTime
  title       String
  priceAED    Float
  details     Json?
  totalSlots  Int
  bookedSlots Int?       @default(0)
  skill       Skill
  thumbnail   String     @default("")
  Bookings    Bookings[]
}

model ContactSubmission {
  id        String   @id @default(uuid())
  name      String
  email     String
  mobile    String
  message   String
  createdAt DateTime @default(now())
}

model User {
  id            String               @id @default(uuid())
  email         String               @unique
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  likedItems    LikedCatalogueItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LikedCatalogueItem {
  id              String        @id @default(uuid())
  userId          String
  catalogueItemId String
  user            User          @relation(fields: [userId], references: [id])
  catalogueItem   CatalogueItem @relation(fields: [catalogueItemId], references: [id])

  @@index([userId])
  @@index([catalogueItemId])
}

model Bookings {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  firstName  String
  lastName   String
  email      String
  mobile     String
  eventId    String?
  workshopId String?
  event      Event?    @relation(fields: [eventId], references: [id])
  workshop   Workshop? @relation(fields: [workshopId], references: [id])

  @@index([eventId])
  @@index([workshopId])
}

enum EnumMaterial {
  canvas
  chiffon
  cotton
  crepe
  denim
  leather
  lace
  linen
  satin
  silk
  synthetic
  velvet
  wool
}

enum Skill {
  beginner
  intermediate
  advanced
}
